/*!
*** action-uptodater 2.5.1
*** Copyright Â© 2022, Jaid <jaid.jsx@gmail.com> (https://github.com/Jaid)
*** @license MIT
*** See https://github.com/Jaid/action-node-boilerplate
!*/
export const id=544;export const ids=[544];export const modules={1430:(e,s,t)=>{var i=t(202);e.exports=(i.default||i).template({compiler:[8,">= 4.3.0"],main:function(e,s,t,i,n){return'import yargs from "yargs"\n\nimport {hideBin} from "../node_modules/yargs/helpers/helpers.mjs" // HACK Switch to yargs\' ESM resolve shortcut "yargs/helpers" some day, but not now, it\'s not well supported by ESLint and webpack\nimport core from "./core.js"\nimport readableMs from "./lib/esm/readable-ms.js"\n\n/**\n * @param {*} message\n * @param {string} [level="info"]\n */\nconst log = (message, level = "info") => {\n  if (core?.logger?.[level]) {\n    core.logger[level](message)\n  } else {\n    console[level](message)\n  }\n}\n\nprocess.on("exit", code => {\n  log(`Exiting with code ${code} after ${readableMs(Date.now() - core.startTime)}`)\n})\n\n/**\n * @return {Promise<void>}\n */\nconst job = async () => {\n  const pluginsRequire = import.meta.webpackContext("./plugins", {\n    mode: "lazy",\n    regExp: /^\\.\\/\\w+\\/index.js$/,\n  })\n  const loaders = pluginsRequire.keys().map(async value => {\n    const plugin = await pluginsRequire(value)\n    return [\n      value.match(/[/\\\\](.+?)[/\\\\]index\\.js$/)[1],\n      plugin.default,\n    ]\n  })\n  const entries = await Promise.all(loaders)\n  const plugins = Object.fromEntries(entries)\n  await core.init(plugins)\n}\n\n/**\n * @type {import("yargs").CommandBuilder}\n */\nconst builder = {\n}\n\ntry {\n  await yargs(hideBin(process.argv))\n    .scriptName(process.env.REPLACE_PKG_NAME)\n    .version(process.env.REPLACE_PKG_VERSION)\n    .command("$0", process.env.REPLACE_PKG_DESCRIPTION, builder, job)\n    .parse()\n} catch (error) {\n  log("Unhandled error", "error")\n  log(error, "error")\n}'},useData:!0})},4757:(e,s,t)=>{t.d(s,{a:()=>o});var i=t(8245),n=t(3079),r=t(8632),a=t(3885);const o=class{testers=[];id=null;title=null;passedTests=0;failedTests=0;consoleIcon=r.a.pass;pkg=null;incrementPassedTests(){this.passedTests++}incrementFailedTests(){this.consoleIcon=r.a.fail,this.failedTests++}getTitle(){return(0,a.a)(this.title)?this.title:this.id}isRelevantToRepo(){return!0}hasTesters(){return(0,a.a)(this.testers)}hasDependency(e,s){const t=s?n(s):["dependencies","devDependencies","optionalDependencies","peerDependencies","bundleDependencies","bundledDependencies"];if((0,a.b)(this.pkg))return!1;for(const s of t){var i;if(null!==(i=this.pkg[s])&&void 0!==i&&i[e])return!0}return!1}hasProductionDependency(e){return this.hasDependency(e,"dependencies")}hasDevelopmentDependency(e){return this.hasDependency(e,"devDependencies")}async fileExists(e){return await i.pathExists(e)}addTester(e){e.rule=this,this.testers.push(e)}}},8345:(e,s,t)=>{t.d(s,{a:()=>l});var i=t(6486),n=t(5089),r=t(4592),a=t(8632),o=t(3885);const l=class{title="Tester";passed=!1;rule=null;consoleIcon=a.a.fail;fixes=[];appliedFixes=[];logMessages=[];async test(){return!0}setTitle(e){this.ansiTitle=e,this.title=(0,n.a)(e)}setFunction(e){this.test=e}hasFix(){return(0,o.a)(this.fixes)}log(e){this.logMessages.push(e)}async run(e){const s=await this.test(e);if(!0!==s){if(this.log((0,i.isString)(s)?s:"Failed"),e.shouldFix&&((0,i.isFunction)(this.collectFixes)&&this.collectFixes(),(0,o.a)(this.fixes))){for(const e of this.fixes)await e.apply(),this.appliedFixes.push(e);const s=await this.test(e);if(!0===s)return this.log("Fixed successfully"),this.consoleIcon=a.a.fix,this.rule.incrementPassedTests(),!0;this.consoleIcon=a.a.fixFailed,this.log("Tried to apply a fix, but the test still failed on second run"),(0,i.isString)(s)&&this.log(s)}return this.rule.incrementFailedTests(),!1}return this.passed=!0,this.consoleIcon=a.a.pass,this.rule.incrementPassedTests(),this.log("Passed! <3"),!0}addFix(e,s){const t=new r.a(e,s);t.tester=this,this.fixes.push(t)}}},8632:(e,s,t)=>{t.d(s,{a:()=>r});var i=t(5264),n=t(9486);const r={pass:n.a.green(i.a.tick),fail:n.a.red(i.a.cross),fix:"ðŸ”§",fixFailed:"ðŸ’£"}},2544:(e,s,t)=>{t.r(s),t.d(s,{default:()=>p});var i=t(4757),n=t(8410),r=t(6380),a=t(9411),o=t(8245),l=t(9486),c=t(8345);const d=class extends c.a{file=null;constructor(e){super(),this.file=a.resolve(e),this.shortFile=e,this.setTitle(`Directory ${l.a.yellow(this.shortFile)} should exist`)}async test(){if(!await o.pathExists(this.file))return`${this.shortFile} does not exist`;return!!(await o.stat(this.file)).isDirectory()||`${this.shortFile} is not a directory`}};var h=t(1430);const p=new class extends i.a{title="Depends on jaid-core";async isRelevantToRepo(){return this.hasProductionDependency("jaid-core")&&this.hasProductionDependency("yargs")}init(){this.addTester(new n.a("src/index.js",h())),this.addTester(new d("src/plugins")),this.addTester(new r.a("src/core.js"))}}},8410:(e,s,t)=>{t.d(s,{a:()=>c});var i=t(6005),n=t(9411),r=(t(8245),t(9486));const a=t(7088).default,o=e=>i.createHash("md5").update(e).digest("hex");var l=t(8345);const c=class extends l.a{expectedHash=null;file=null;constructor(e,s){super(),this.expectedContent=s,this.expectedHash=o(s),this.file=n.resolve(e),this.shortFile=e,this.setTitle(`${r.a.yellow(this.shortFile)} should have md5 ${r.a.blue(this.expectedHash)}`)}async test(){const e=await a(this.file);if(!e)return`${this.shortFile} does not exist`;const s=o(e);return!(s!==this.expectedHash)||`They are not equal, got hash ${s} from file`}collectFixes(){this.addFix(this.shortFile,this.expectedContent)}}},6380:(e,s,t)=>{t.d(s,{a:()=>o});var i=t(9411),n=t(8245),r=t(9486),a=t(8345);const o=class extends a.a{file=null;constructor(e){super(),this.file=i.resolve(e),this.shortFile=e,this.setTitle(`${r.a.yellow(this.shortFile)} should exist and have content`)}async test(){if(!await n.pathExists(this.file))return`${this.shortFile} does not exist`;return!!(await n.stat(this.file)).size||`${this.shortFile} does exist, but is empty`}}}};
//# sourceMappingURL=544.js.map