/*!
*** action-uptodater 2.5.0
*** Copyright Â© 2022, Jaid <jaid.jsx@gmail.com> (https://github.com/Jaid)
*** @license MIT
*** See https://github.com/Jaid/action-node-boilerplate
!*/
export const id=676;export const ids=[676];export const modules={4757:(e,t,s)=>{s.d(t,{a:()=>l});var i=s(8245),n=s(3079),a=s(8632),o=s(3885);const l=class{testers=[];id=null;title=null;passedTests=0;failedTests=0;consoleIcon=a.a.pass;pkg=null;incrementPassedTests(){this.passedTests++}incrementFailedTests(){this.consoleIcon=a.a.fail,this.failedTests++}getTitle(){return(0,o.a)(this.title)?this.title:this.id}isRelevantToRepo(){return!0}hasTesters(){return(0,o.a)(this.testers)}hasDependency(e,t){const s=t?n(t):["dependencies","devDependencies","optionalDependencies","peerDependencies","bundleDependencies","bundledDependencies"];if((0,o.b)(this.pkg))return!1;for(const t of s){var i;if(null!==(i=this.pkg[t])&&void 0!==i&&i[e])return!0}return!1}hasProductionDependency(e){return this.hasDependency(e,"dependencies")}hasDevelopmentDependency(e){return this.hasDependency(e,"devDependencies")}async fileExists(e){return await i.pathExists(e)}addTester(e){e.rule=this,this.testers.push(e)}}},8345:(e,t,s)=>{s.d(t,{a:()=>r});var i=s(6486),n=s(5089),a=s(4592),o=s(8632),l=s(3885);const r=class{title="Tester";passed=!1;rule=null;consoleIcon=o.a.fail;fixes=[];appliedFixes=[];logMessages=[];async test(){return!0}setTitle(e){this.ansiTitle=e,this.title=(0,n.a)(e)}setFunction(e){this.test=e}hasFix(){return(0,l.a)(this.fixes)}log(e){this.logMessages.push(e)}async run(e){const t=await this.test(e);if(!0!==t){if(this.log((0,i.isString)(t)?t:"Failed"),e.shouldFix&&((0,i.isFunction)(this.collectFixes)&&this.collectFixes(),(0,l.a)(this.fixes))){for(const e of this.fixes)await e.apply(),this.appliedFixes.push(e);const t=await this.test(e);if(!0===t)return this.log("Fixed successfully"),this.consoleIcon=o.a.fix,this.rule.incrementPassedTests(),!0;this.consoleIcon=o.a.fixFailed,this.log("Tried to apply a fix, but the test still failed on second run"),(0,i.isString)(t)&&this.log(t)}return this.rule.incrementFailedTests(),!1}return this.passed=!0,this.consoleIcon=o.a.pass,this.rule.incrementPassedTests(),this.log("Passed! <3"),!0}addFix(e,t){const s=new a.a(e,t);s.tester=this,this.fixes.push(s)}}},8632:(e,t,s)=>{s.d(t,{a:()=>a});var i=s(5264),n=s(9486);const a={pass:n.a.green(i.a.tick),fail:n.a.red(i.a.cross),fix:"ðŸ”§",fixFailed:"ðŸ’£"}},7676:(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var i=s(4757),n=s(8410),a=s(6380),o=s(2080);const l=new class extends i.a{title="Any repository";init(){this.addTester(new n.a("license.txt",'MIT License\n\nCopyright Â© 2021, Jaid <jaid.jsx@gmail.com> (https://github.com/jaid)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.')),this.addTester(new n.a(".editorconfig","root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = false\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.txt]\ntrim_trailing_whitespace = false\n\n[*.hbs]\ntrim_trailing_whitespace = false\n\n[/package.json]\ninsert_final_newline = true # npm install rewrites the JSON file with a final newline, so we manually keep them to prevent unneeded stashes")),this.addTester(new n.a(".github/funding.yml",'module.exports = {\n\t"github": "Jaid",\n\t"custom": "https://twitch.tv/products/jaidchen"\n};')),this.addTester(new a.a("readme.md")),this.addTester(new o.a(".travis.yml"))}}},8410:(e,t,s)=>{s.d(t,{a:()=>h});var i=s(6005),n=s(9411),a=(s(8245),s(9486));const o=s(7088).default,l=e=>i.createHash("md5").update(e).digest("hex");var r=s(8345);const h=class extends r.a{expectedHash=null;file=null;constructor(e,t){super(),this.expectedContent=t,this.expectedHash=l(t),this.file=n.resolve(e),this.shortFile=e,this.setTitle(`${a.a.yellow(this.shortFile)} should have md5 ${a.a.blue(this.expectedHash)}`)}async test(){const e=await o(this.file);if(!e)return`${this.shortFile} does not exist`;const t=l(e);return!(t!==this.expectedHash)||`They are not equal, got hash ${t} from file`}collectFixes(){this.addFix(this.shortFile,this.expectedContent)}}},6380:(e,t,s)=>{s.d(t,{a:()=>l});var i=s(9411),n=s(8245),a=s(9486),o=s(8345);const l=class extends o.a{file=null;constructor(e){super(),this.file=i.resolve(e),this.shortFile=e,this.setTitle(`${a.a.yellow(this.shortFile)} should exist and have content`)}async test(){if(!await n.pathExists(this.file))return`${this.shortFile} does not exist`;return!!(await n.stat(this.file)).size||`${this.shortFile} does exist, but is empty`}}},2080:(e,t,s)=>{s.d(t,{a:()=>l});var i=s(9411),n=s(8245),a=s(9486),o=s(8345);const l=class extends o.a{file=null;constructor(e){super(),this.file=i.resolve(e),this.shortFile=e,this.setTitle(`${a.a.yellow(this.shortFile)} should not exist`)}async test(){return!await n.pathExists(this.file)||`${this.shortFile} does exist`}collectFixes(){this.addFix(this.shortFile,!1)}}}};
//# sourceMappingURL=676.js.map